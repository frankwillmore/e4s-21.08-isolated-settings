# Variables can be overridden from gitlab when runninging manually
variables:
  JLSE_SCHEDULER_PARAMETERS: "-A Operations -n 1 -t 10 -q arcticus"
  E4S_VERSION: e4s-21.08
  SPACK_INSTALLATION: /soft/ecp/spack/${E4S_VERSION}
#  WORKING_DIR: ANL/JLSE/Arcticus/E4S-21.08
  WORKING_DIR: "" 
  SPACK_MIRROR: /soft/ecp/mirrors/arcticus-${E4S_VERSION}
  SPACK_DEPLOY_DIR: /tmp/deploy/${E4S_VERSION}
  #SPACK_DEPLOY_DIR: /soft/ecp/deploy/${E4S_VERSION}
  # The below vals are defaults and may be overriden on a per-run basis
  REMOVE_BUILDCACHE: "False"
  BUILD_E4S: "True"
  DEPLOY_E4S: "True"
  CREATE_SOURCE_MIRROR: "False"

stages:
  - generate
  - build
  - deploy

remove_buildcache:
  stage: generate
  tags:
  - shell
  only:
    variables:
      - $REMOVE_BUILDCACHE == "True"
  script:
  - echo "Removing buildcache at ${SPACK_MIRROR} ..."
  - rm -rf ${SPACK_MIRROR}

generate-spack-pipeline:
  stage: generate
  tags:
  - shell
  only:
    variables:
      - $BUILD_E4S == "True"
#    changes:
#      - ${WORKING_DIR}/spack.yaml
#      - ${WORKING_DIR}/der_kommissar.yaml

  before_script:
  - hostname  
  - pwd
  - ls
  - . ${SPACK_INSTALLATION}/share/spack/setup-env.sh
  # Verify location and version
  - which spack
  - spack -V
#  - cd ${CI_PROJECT_DIR}/${WORKING_DIR}
  script:
# This is done in before script... verify then delete this
#  - cd ${CI_PROJECT_DIR}/${WORKING_DIR}
  - echo ${CI_PROJECT_DIR}
  - pwd
  - ls
  - pwd
# verify we're stull using the right spack
  - which spack
  # Purge local settings
  - rm -rf $HOME/.spack
#  - spack env activate .
  - echo "${WORKING_DIR}"
  - spack env activate ./${WORKING_DIR}
  - spack env st
  - export SPACK_GNUPGHOME=$HOME/spack-gnupg
  - spack gpg list
# Delete the aws mirror, nothing there for us, just search time
#  - rm -f ${SPACK_ROOT}/etc/spack/defaults/mirrors.yaml
  - spack config blame mirrors
  - spack mirror list
# The purge above does this
#  - spack clean -m
# hide this for now, it generates a ton of output we don't need to see
#  - spack buildcache list -L --allarch
  - spack concretize -f 2>&1 
  # First time we run the pipeline, we might want to override this 
  # to create a source mirror.
  - \[ "${CREATE_SOURCE_MIRROR}" == "True" \] && spack mirror create -d ${SPACK_MIRROR} --all
  # remove a spec to force this pipeline stage to run  
  - rm -f ${SPACK_MIRROR}/build_cache/linux-opensuse_leap15-x86_64-gcc-9.3.0-zlib-1.2.11-x7fpcwas5so6hiemegyf4er3sbbmbpz3.spec.yaml
# FTW: need to add this back for proudction, just leaving out for debugging
#  - spack buildcache update-index -d ${SPACK_MIRROR}
#  - spack ci generate --dependencies --optimize  --output-file jobs_scratch_dir/pipeline.yml --artifacts-root ${CI_PROJECT_DIR}/artifacts_root
  - echo ${SPACK_CONCRETE_ENV_DIR}
  - echo ${CI_PROJECT_DIR}
  - spack ci generate --dependencies --optimize  --output-file jobs_scratch_dir/pipeline.yml 
  - echo "Dumping generateed CI:"
  - cat jobs_scratch_dir/pipeline.yml
  - pwd
  - ls -R
#  - ls jobs_scratch_dir
  - date
  - find . -name spack.lock
  - find . -name spack.yaml
#  after_script:
#  - rm -rf ${SPACK_ROOT}
  artifacts:
    paths:
    - jobs_scratch_dir/pipeline.yml    

build-e4s:
  stage: build
  only:
    variables:
      - $BUILD_E4S == "True"
#    changes:
#      - ${WORKING_DIR}/spack.yaml
  trigger:
    include:
    - artifact: "jobs_scratch_dir/pipeline.yml"
      job: generate-spack-pipeline
    strategy: depend

deploy:
  stage: deploy
  tags: 
  - shell
  only:
    variables:
      - $DEPLOY_E4S == "True"
  script:
    - hostname 
    - echo "FTW - cloning spack into ${SPACK_DEPLOY_DIR}"
    - mkdir -p ${SPACK_DEPLOY_DIR}
    - cd ${SPACK_DEPLOY_DIR}
    - rm -rf spack-deploy
    - git clone -b ${E4S_VERSION} --single-branch --depth=1 ${SPACK_INSTALLATION} spack-deploy
    - cd spack-deploy
    - source share/spack/setup-env.sh
# this dang file is making spack stop looking for the right location
#    - ls /tmp/user/spack-stage/willmore/build_cache/linux-opensuse_leap15-x86_64-gcc-9.3.0-zlib-1.2.11-x7fpcwas5so6hiemegyf4er3sbbmbpz3.spack
    # clean up misc cache from ~/.spack
    - spack clean -m
    # copy all site configuration for spack instance 
    - cp ${CI_PROJECT_DIR}/${WORKING_DIR}/site_config/* ${SPACK_ROOT}/etc/spack
    # the other permission is set to 0 before copying. 
    # Adding 4 will ensure user can read the file
    - chmod 664 ${SPACK_ROOT}/etc/spack/*.yaml
    - export SPACK_GNUPGHOME=${HOME}/spack-gnupg
    - spack gpg list
    - echo "Updating buildcache index for ${SPACK_MIRROR}"
    - spack buildcache update-index -d ${SPACK_MIRROR}
    - find ${SPACK_MIRROR} -name *.spack -exec chmod o+r {} \;
#    - find ${SPACK_MIRROR} -name *.spack 
    - chmod o+r ${SPACK_MIRROR}/build_cache/index.json
    - spack buildcache list -L --allarch
    # need to actually cd to the dir to activate environment, otherwise spack won't find the included file
    - cd ${CI_PROJECT_DIR}/${WORKING_DIR}/prod
    - spack env activate .
    - spack -d install --cache-only
    - spack module tcl refresh --delete-tree -y
    - spack find

